swagger: "2.0"
info:
  description: This is the API documentation for the Dev Fusion
  version: 1.0.0
  title: Dev Fusion
  contact:
    email: alex.gershfeld@gmail.com

paths:
  /login:
    post:
      tags:
      - Authentication
      summary: Logs in a user with the given values
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: login
        description: login
        schema:
          $ref: '#/definitions/Login'
      responses:
        200:
          description: Successful
        401:
          description: Password is wrong/User is not verified
        404:
          description: URL Not Found/User not found
        500:
          description: Server Error
  /register:
    post:
      tags:
      - Authentication
      summary: Register a user with the given values
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: register
        description: register
        schema:
          $ref: '#/definitions/Register'
      responses:
        201:
          description: User Created
        403:
          description: Username/Email is taken
        404:
          description: URL Not Found
        500:
          description: Server Error
  /users:
    get:
      tags:
      - Users
      summary: Gets the user with the given userId
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: getUser
        description: getUser
        schema:
          $ref: '#/definitions/usersGet'
      responses:
        200:
          description: Successful
        403:
          description: Token is not valid
        404:
          description: URL Not Found/User not found
        500:
          description: Server Error
    put:
      tags:
      - Users
      summary: Updates the user with the given userId
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: updateUser
        description: updateUser
        schema:
          $ref: '#/definitions/usersPut'
      responses:
        200:
          description: Successful
        403:
          description: Signed in user does not have access to the given user
        404:
          description: URL Not Found/User with the userId does not exist
        500:
          description: Server Error

  /api/projects:
    post:
      tags:
      - Project
      summary: Creates a Project
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: createProject
        description: createProject
        schema:
          $ref: '#/definitions/createProject'
      responses:
        200:
          description: Successful
        500:
          description: Server Error

  /api/project/{projectId}:
    get:
      tags:
        -Project
      summary: Gets a Project
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        description: get a project
        schema:
          type: string
        required: true
        description: The ID of the project to retrieve
      responses:
        200:
          description: Successful
        500:
          description: Server Error

definitions:
  Login:
    type: object
    required:
    - login
    - password
    properties:
      login:
        type: string
        example: "AlperenY"
      password:
        type: string
        example: "hashed"
  Register:
    type: object
    required:
    - firstName
    - lastName
    - password
    - username
    - email
    properties:
      firstName:
        type: string
        example: "Alperen"
      lastName:
        type: string
        example: "Yazmaci"
      password:
        type: string
        example: "abc123!"
      username:
        type: string
        example: "alpereny"
      email:
        type: string
        example: "alperen.yazmaci@gmail.com"
  usersGet:
    type: object
    required:
    - userId
    properties:
      userId:
        type: string
        example: "667148327d5f8d94a8a374c5"
  usersPut:
    type: object
    required:
    - userId
    properties:
      userId: 
        type: string
        example: "667148327d5f8d94a8a374c5"
      firstName:
        type: string
        example: "Alperen"
      lastName:
        type: string
        example: "Yazmaci"
      bio:
        type: string
        example: "abc123!"
      technologies:
        type: array
        items:
          type: string
          example: "API"

  createProject:
    type: object
    required:
    - isOpen
    - isDone
    - isStarted
    - dateCreated
    - ownerID
    - currentVsRequired
    - deadline
    - projectStartDate
    - roles
    - technologies
    - title
    properties:
      isOpen:
        type: boolean
        example: false
      isDone:
        type: boolean
        example: false
      isStarted:
        type: boolean
        example: false
      dateCreated:
        type: string
        example: "2023-05-24T10:00:00Z"
      ownerID:
        type: string
        example: "667147c37d5f8d94a8a374c1"
      currentVsRequired:
        type: array
        example: [1, 9]
      deadline:
        type: string
        example: "2029-05-24T10:00:00Z"
      projectStartDate:
        type: string
        example: "2023-25-24T10:00:00Z"
      roles:
        type: array
        example: ["Project Manager", "Frontend"]
      technologies:
        type: array
        example: ["HTML"]
      title:
        type: string
        example: "Test Me"

host: dev-fusion-3adc28f56db6.herokuapp.com
basePath: /api
schemes:
  - http